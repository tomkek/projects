# This is the "one-and-only" configuration for OpenDaVINCI.
# Its format is like:
#
# section.key=value
#
# If you have several modules of the same type, the following configuration
# scheme applies:
#
# global.key=value # <-- This configuration applies for all modules.
#
# section.key=value # <-- This configuration applies for all modules of type "section".
#
# section:ID.key=value # <-- This configuration applies for the module "ID" of type "section".

#
# GLOBAL CONFIGURATION
#
global.car = Scenarios/Models/FordEscape.objx
#global.car = Scenarios/Models/RedRocketCar.objx
global.scenario = file://Scenarios/Track_Parking_Lot_A_no-obstacles.scnx
global.showGrid = 0


#
# CONFIGURATION FOR LANEDETECTOR
#
lanedetector.camera_id = 2  # select here the proper camera
lanedetector.debug = 1      # set to 0 to disable any windows and further output


#
# CONFIGURATION FOR LANEFOLLOWER
#
lanefollower.camera_id = 2  # select here the proper camera
lanefollower.debug = 1      # set to 0 to disable any windows and further output


#
# CONFIGURATION FOR VCR
#
VCR.camera_id = 2  # select here the proper camera
VCR.debug = 1      # set to 0 to disable any windows and further output


#
# CONFIGURATION FOR IRUS (Infrared and ultrasonic simulation)
#
irus.numberOfSensors = 6                   # Number of configured sensors.
irus.showPolygons = 1                      # Show explicitly all polygons.

irus.sensor0.id = 0                        # This ID is used in SensorBoardData structure.
irus.sensor0.name = Infrared_FrontRight    # Name of the sensor
irus.sensor0.rotZ = -90                    # Rotation of the sensor around the Z-axis in degrees, positive = counterclockwise, negative = clockwise, 0 = 12am, -90 = 3pm, ...
irus.sensor0.translation = (1.0;-1.0;0.0)  # Translation (X;Y;Z) w.r.t. vehicle's center
irus.sensor0.angleFOV = 5                  # In degrees.
irus.sensor0.distanceFOV = 3               # In meters.
irus.sensor0.clampDistance = 2.9           # Any distances greater than this distance will be ignored and -1 will be returned.
irus.sensor0.showFOV = 1                   # Show FOV in monitor.

irus.sensor1.id = 1                        # This ID is used in SensorBoardData structure.
irus.sensor1.name = Infrared_Rear          # Name of the sensor
irus.sensor1.rotZ = -180                   # Rotation of the sensor around the Z-axis in degrees, positive = counterclockwise, negative = clockwise, 0 = 12am, -90 = 3pm, ...
irus.sensor1.translation = (-1.0;0.0;0.0)  # Translation (X;Y;Z) w.r.t. vehicle's center
irus.sensor1.angleFOV = 5                  # In degrees.
irus.sensor1.distanceFOV = 3               # In meters.
irus.sensor1.clampDistance = 2.9           # Any distances greater than this distance will be ignored and -1 will be returned.
irus.sensor1.showFOV = 1                   # Show FOV in monitor.

irus.sensor2.id = 2                        # This ID is used in SensorBoardData structure.
irus.sensor2.name = Infrared_FrontLeft     # Name of the sensor
irus.sensor2.rotZ = 90                     # Rotation of the sensor around the Z-axis in degrees, positive = counterclockwise, negative = clockwise, 0 = 12am, -90 = 3pm, ...
irus.sensor2.translation = (1.0;1.0;0.0)   # Translation (X;Y;Z) w.r.t. vehicle's center
irus.sensor2.angleFOV = 5                  # In degrees.
irus.sensor2.distanceFOV = 3               # In meters.
irus.sensor2.clampDistance = 2.9           # Any distances greater than this distance will be ignored and -1 will be returned.
irus.sensor2.showFOV = 1                   # Show FOV in monitor.

irus.sensor3.id = 3                        # This ID is used in SensorBoardData structure.
irus.sensor3.name = UltraSonic_FrontCenter # Name of the sensor
irus.sensor3.rotZ = 0                      # Rotation of the sensor around the Z-axis in degrees, positive = counterclockwise, negative = clockwise, 0 = 12am, -90 = 3pm, ...
irus.sensor3.translation = (1.0;0.0;0.0)   # Translation (X;Y;Z) w.r.t. vehicle's center
irus.sensor3.angleFOV = 20                 # In degrees.
irus.sensor3.distanceFOV = 40              # In meters.
irus.sensor3.clampDistance = 39            # Any distances greater than this distance will be ignored and -1 will be returned.
irus.sensor3.showFOV = 1                   # Show FOV in monitor.

irus.sensor4.id = 4                        # This ID is used in SensorBoardData structure.
irus.sensor4.name = UltraSonic_FrontRight  # Name of the sensor
irus.sensor4.rotZ = -45                    # Rotation of the sensor around the Z-axis in degrees, positive = counterclockwise, negative = clockwise, 0 = 12am, -90 = 3pm, ...
irus.sensor4.translation = (1.0;-1.0;0.0)  # Translation (X;Y;Z) w.r.t. vehicle's center
irus.sensor4.angleFOV = 20                 # In degrees.
irus.sensor4.distanceFOV = 40              # In meters.
irus.sensor4.clampDistance = 39            # Any distances greater than this distance will be ignored and -1 will be returned.
irus.sensor4.showFOV = 1                   # Show FOV in monitor.

irus.sensor5.id = 5                        # This ID is used in SensorBoardData structure.
irus.sensor5.name = UltraSonic_FrontLeft   # Name of the sensor
irus.sensor5.rotZ = 45                     # Rotation of the sensor around the Z-axis in degrees, positive = counterclockwise, negative = clockwise, 0 = 12am, -90 = 3pm, ...
irus.sensor5.translation = (1.0;1.0;0.0)   # Translation (X;Y;Z) w.r.t. vehicle's center
irus.sensor5.angleFOV = 20                 # In degrees.
irus.sensor5.distanceFOV = 40              # In meters.
irus.sensor5.clampDistance = 39            # Any distances greater than this distance will be ignored and -1 will be returned.
irus.sensor5.showFOV = 1                   # Show FOV in monitor.


#
# CONFIGURATION FOR EGOCONTROLLER
#
egocontroller.device=keyboard              # Which device for control to be used (currently, joysticks are working only under Linux, e.g. keyboard or /dev/input/js0).
egocontroller.behavior=simple              # [simple,force,forcesimplifiedbicycle,forcebicycle] Set to force or forcebicycle to get force-based control.            
egocontroller.minimumTurningRadius=4.24    # Minimum turning radius in m.
egocontroller.vehicleMass=1700.0           # Mass in kg.
egocontroller.adherenceCoefficient=100.0   # N per MPS (squared).
egocontroller.idleForce=200.0              # Force if vehicle is in idle (no gear) in N.
egocontroller.Ksteering=2.0
egocontroller.maximumSteeringRate=50.0
egocontroller.Kthrottle=40.0
egocontroller.tauBrake=1.0
egocontroller.KstaticBrake=100.0
egocontroller.KdynamicBrake=60.0
egocontroller.distanceCenterOfMassToFrontAxle = 1.344 # Parameter for bicycle model: Distance from center of mass to front axle.
egocontroller.distanceCenterOfMassToRearAxle = 1.456  # Parameter for bicycle model: Distance from center of mass to rear axle.
egocontroller.momentOfInertia = 2800                  # Parameter for bicycle model: Moment of inertia.
egocontroller.skewStiffnessFront = 75000              # Parameter for bicycle model: Skew stiffness front wheels.
egocontroller.skewStiffnessRear = 150000              # Parameter for bicycle model: Skew stiffness rear wheels.
egocontroller.wheelbase = 3.4                         # Parameter for simplified bicycle model: Wheel base.
egocontroller.simpleStart = (0;0;0)
egocontroller.simpleRotZ = 90


#
# CONFIGURATION FOR PLAYER
#
#player.input = file://player.rec
player.input = file:///dev/stdin  # Use player like this: ./player --cid=111 < myFile.rec
player.autoRewind = 0 # 0 = no rewind in the case of EOF, 1 = rewind.
player.remoteControl = 0 # 0 = no remote control, 1 = allowing remote control (i.e. play, pause, rewind, step_forward)
player.sizeOfCache = 1000 # How many entries should be cached.
player.timeScale = 1.0 # A time scale factor of 1.0 means real time, a factor of 0 means as fast as possible. The smaller the time scale factor is the faster runs the replay.


#
# CONFIGURATION FOR RECORDER
#
recorder.output = file://recorder.rec
recorder.remoteControl = 0 # 0 = no remote control, 1 = allowing remote control (i.e. start and stop recording)


#
# CONFIGURATION FOR PROXY
#
proxy.debug = 0
proxy.host = 127.0.0.1
proxy.port = 27800
proxy.user_start_button_file = file:///sys/class/gpio/gpio113/value
proxy.GPIO_brakeLED_file = file:///sys/class/gpio/gpio39/value
proxy.GPIO_turnLeftLED_file = file:///sys/class/gpio/gpio140/value
proxy.GPIO_turnRightLED_file = file:///sys/class/gpio/gpio138/value
proxy.steering.offset = 132; // Correct steering offset to drive straight.
proxy.speed.max = 2.0;
proxy.minimumTurningRadiusLeft=4.85         # Minimum turning radius to the left (for calculating maximum steering angle to the left); Attention! we used data from the miniature vehicle Meili and thus, all values are scaled by factor 10 to be compatible with the simulation!
proxy.minimumTurningRadiusRight=5.32        # Minimum turning radius to the right (for calculating maximum steering angle to the right); Attention! we used data from the miniature vehicle Meili and thus, all values are scaled by factor 10 to be compatible with the simulation!
proxy.wheelbase=2.65                        # Wheelbase; Attention! we used data from the miniature vehicle Meili and thus, all values are scaled by factor 10 to be compatible with the simulation!
proxy.invertedSteering=0                    # iff 0: interpret neg. steering wheel angles as steering to the left; iff 1: otherwise

proxy.numberOfSensors = 6                   # Number of configured sensors.

proxy.sensor0.id = 0                        # This ID is used in SensorBoardData structure.
proxy.sensor0.name = Infrared_FrontRight    # Name of the sensor (just for humans!).
proxy.sensor0.address = 123                 # Enter here the address that is used by Benjamin's UDP_Server to name the sensor.
proxy.sensor0.clampDistance = 0.2           # Any distances greater than this distance will be ignored and -1 will be returned.

proxy.sensor1.id = 1                        # This ID is used in SensorBoardData structure.
proxy.sensor1.name = Infrared_Rear          # Name of the sensor (just for humans!).
proxy.sensor1.address = 456                 # Enter here the address that is used by Benjamin's UDP_Server to name the sensor.
proxy.sensor1.clampDistance = 0.2           # Any distances greater than this distance will be ignored and -1 will be returned.

proxy.sensor2.id = 2                        # This ID is used in SensorBoardData structure.
proxy.sensor2.name = Infrared_RearRight     # Name of the sensor (just for humans!).
proxy.sensor2.address = 789                 # Enter here the address that is used by Benjamin's UDP_Server to name the sensor.
proxy.sensor2.clampDistance = 0.2           # Any distances greater than this distance will be ignored and -1 will be returned.

proxy.sensor3.id = 3                        # This ID is used in SensorBoardData structure.
proxy.sensor3.name = UltraSonic_FrontCenter # Name of the sensor (just for humans!).
proxy.sensor3.address = 135                 # Enter here the address that is used by Benjamin's UDP_Server to name the sensor.
proxy.sensor3.clampDistance = 0.4           # Any distances greater than this distance will be ignored and -1 will be returned.

proxy.sensor4.id = 4                        # This ID is used in SensorBoardData structure.
proxy.sensor4.name = UltraSonic_FrontRight  # Name of the sensor (just for humans!).
proxy.sensor4.address = 246                 # Enter here the address that is used by Benjamin's UDP_Server to name the sensor.
proxy.sensor4.clampDistance = 0.4           # Any distances greater than this distance will be ignored and -1 will be returned.

proxy.sensor5.id = 5                        # This ID is used in SensorBoardData structure.
proxy.sensor5.name = UltraSonic_RearRight   # Name of the sensor (just for humans!).
proxy.sensor5.address = 680                 # Enter here the address that is used by Benjamin's UDP_Server to name the sensor.
proxy.sensor5.clampDistance = 0.4           # Any distances greater than this distance will be ignored and -1 will be returned.


#
# CONFIGURATION FOR PROXY-STM32F4
#
proxy-STM32F4.debug = 1
proxy-STM32F4.serial_port = file:///dev/ttyACM0
proxy-STM32F4.serial_speed = 115200
proxy-STM32F4.user_start_button_file = file:///sys/class/gpio/gpio113/value
proxy-STM32F4.GPIO_brakeLED_file = file:///sys/class/gpio/gpio39/value
proxy-STM32F4.GPIO_turnLeftLED_file = file:///sys/class/gpio/gpio140/value
proxy-STM32F4.GPIO_turnRightLED_file = file:///sys/class/gpio/gpio138/value
proxy-STM32F4.steering.offset = 132; // Correct steering offset to drive straight.
proxy-STM32F4.speed.max = 2.0;
proxy-STM32F4.minimumTurningRadiusLeft=4.85         # Minimum turning radius to the left (for calculating maximum steering angle to the left); Attention! we used data from the miniature vehicle Meili and thus, all values are scaled by factor 10 to be compatible with the simulation!
proxy-STM32F4.minimumTurningRadiusRight=5.32        # Minimum turning radius to the right (for calculating maximum steering angle to the right); Attention! we used data from the miniature vehicle Meili and thus, all values are scaled by factor 10 to be compatible with the simulation!
proxy-STM32F4.wheelbase=2.65                        # Wheelbase; Attention! we used data from the miniature vehicle Meili and thus, all values are scaled by factor 10 to be compatible with the simulation!
proxy-STM32F4.invertedSteering=0                    # iff 0: interpret neg. steering wheel angles as steering to the left; iff 1: otherwise

proxy-STM32F4.numberOfSensors = 6                   # Number of configured sensors.

proxy-STM32F4.sensor0.id = 0                        # This ID is used in SensorBoardData structure.
proxy-STM32F4.sensor0.name = Infrared_FrontRight    # Name of the sensor (just for humans!).
proxy-STM32F4.sensor0.address = 123                 # Enter here the address that is used by Benjamin's UDP_Server to name the sensor.
proxy-STM32F4.sensor0.clampDistance = 0.2           # Any distances greater than this distance will be ignored and -1 will be returned.

proxy-STM32F4.sensor1.id = 1                        # This ID is used in SensorBoardData structure.
proxy-STM32F4.sensor1.name = Infrared_Rear          # Name of the sensor (just for humans!).
proxy-STM32F4.sensor1.address = 456                 # Enter here the address that is used by Benjamin's UDP_Server to name the sensor.
proxy-STM32F4.sensor1.clampDistance = 0.2           # Any distances greater than this distance will be ignored and -1 will be returned.

proxy-STM32F4.sensor2.id = 2                        # This ID is used in SensorBoardData structure.
proxy-STM32F4.sensor2.name = Infrared_RearRight     # Name of the sensor (just for humans!).
proxy-STM32F4.sensor2.address = 789                 # Enter here the address that is used by Benjamin's UDP_Server to name the sensor.
proxy-STM32F4.sensor2.clampDistance = 0.2           # Any distances greater than this distance will be ignored and -1 will be returned.

proxy-STM32F4.sensor3.id = 3                        # This ID is used in SensorBoardData structure.
proxy-STM32F4.sensor3.name = UltraSonic_FrontCenter # Name of the sensor (just for humans!).
proxy-STM32F4.sensor3.address = 135                 # Enter here the address that is used by Benjamin's UDP_Server to name the sensor.
proxy-STM32F4.sensor3.clampDistance = 0.4           # Any distances greater than this distance will be ignored and -1 will be returned.

proxy-STM32F4.sensor4.id = 4                        # This ID is used in SensorBoardData structure.
proxy-STM32F4.sensor4.name = UltraSonic_FrontRight  # Name of the sensor (just for humans!).
proxy-STM32F4.sensor4.address = 246                 # Enter here the address that is used by Benjamin's UDP_Server to name the sensor.
proxy-STM32F4.sensor4.clampDistance = 0.4           # Any distances greater than this distance will be ignored and -1 will be returned.

proxy-STM32F4.sensor5.id = 5                        # This ID is used in SensorBoardData structure.
proxy-STM32F4.sensor5.name = UltraSonic_RearRight   # Name of the sensor (just for humans!).
proxy-STM32F4.sensor5.address = 680                 # Enter here the address that is used by Benjamin's UDP_Server to name the sensor.
proxy-STM32F4.sensor5.clampDistance = 0.4           # Any distances greater than this distance will be ignored and -1 will be returned.


#
# CONFIGURATION FOR MONITOR
#


#
# CONFIGURATION FOR VEHICLE
#
Vehicle.posX = 0                     # Initial position X in cartesian coordinates.
Vehicle.posY = 0                     # Initial position Y in cartesian coordinates.
Vehicle.headingDEG = 90
Vehicle.model=LinearBicycleModelNew  # Which motion model to be used: LinearBicycleModelNew or LinearBicycleModel (for CaroloCup 2013!).
Vehicle.LinearBicycleModelNew.withSpeedController=1          # iff 1: use the VehicleControl.m_speed field; otherwise, ignore m_speed and use VehicleControl.m_acceleration field
Vehicle.LinearBicycleModelNew.minimumTurningRadiusLeft=4.85  # Minimum turning radius to the left (for calculating maximum steering angle to the left); Attention! we used data from the miniature vehicle Meili and thus, all values are scaled by factor 10 to be compatible with the simulation!
Vehicle.LinearBicycleModelNew.minimumTurningRadiusRight=5.32 # Minimum turning radius to the right (for calculating maximum steering angle to the right); Attention! we used data from the miniature vehicle Meili and thus, all values are scaled by factor 10 to be compatible with the simulation!
Vehicle.LinearBicycleModelNew.wheelbase=2.65                 # Wheelbase; Attention! we used data from the miniature vehicle Meili and thus, all values are scaled by factor 10 to be compatible with the simulation!
Vehicle.LinearBicycleModelNew.invertedSteering=0             # iff 0: interpret neg. steering wheel angles as steering to the left; iff 1: otherwise
Vehicle.LinearBicycleModelNew.maxSpeed=2.0                   # maxium speed in m/ss
Vehicle.LinearBicycleModel.minimumTurningRadius=4.24    # Minimum turning radius in m.
Vehicle.LinearBicycleModel.vehicleMass=1700.0           # Mass in kg.
Vehicle.LinearBicycleModel.adherenceCoefficient=100.0   # N per MPS (squared).
Vehicle.LinearBicycleModel.idleForce=200.0              # Force if vehicle is in idle (no gear) in N.
Vehicle.LinearBicycleModel.Ksteering=2.0
Vehicle.LinearBicycleModel.maximumSteeringRate=50.0
Vehicle.LinearBicycleModel.Kthrottle=40.0
Vehicle.LinearBicycleModel.tauBrake=1.0
Vehicle.LinearBicycleModel.KstaticBrake=100.0
Vehicle.LinearBicycleModel.KdynamicBrake=60.0

